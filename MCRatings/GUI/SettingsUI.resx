<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="dgEnabled.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="dgSetting.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="dgField.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="dgOverwrite.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="dgSourcePlaceHolder.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="chkFastStart.ToolTip" xml:space="preserve">
    <value>Enable this option to make MCRatings start faster.

When enabled, MCRatings will just load the JRiver Playlist names without checking how many movies are in each playlist.
The playlist selector will not show the movie counts and empty playlists will also be displayed.</value>
  </data>
  <data name="txtLanguage.ToolTip" xml:space="preserve">
    <value>The preferred language is used to get the Movie Title, description, tagline, and Trailer.
If data is not available for the selected country, EN values are selected.

Please use a 2-letter language code (ISO-639-1)</value>
  </data>
  <data name="maxListLimit.ToolTip" xml:space="preserve">
    <value>Lists with many items are trimmed to keep only this number of items.

This assumes that lists are ordered by Importance (for instance, top-billed Actors show
up first on the Actors list). This is true for most lists coming from TMDb, but not necessarily on the OMDb ones.</value>
  </data>
  <data name="chkPosterFilterLanguage.ToolTip" xml:space="preserve">
    <value>Posters tagged with the TMDb Preferred language below will be preferred.
If there are no posters in that language, then this option is ignored and
a poster is selected anyway using the resolution/score criteria.</value>
  </data>
  <data name="chkPosterSortVotes.ToolTip" xml:space="preserve">
    <value>TMDb posters have a score, but they have too few votes for it to be meaningful.
- When this option is checked, the highest-scoring poster is selected regardless of resolution.
- When this option is unchecked, the highest-resolution poster is selected; when there are
   multiple posters with same resolution, the voting score is used as a tie-breaker.
</value>
  </data>
  <data name="chkFullSize.ToolTip" xml:space="preserve">
    <value>When selected, Poster Browser will automatically load the 
full-size version of the current poster.

If unchecked, only the thumbnail is displayed, but you can then
click it to load the full-size version. This might be useful to avoid
spinning-up your NAS drives.
</value>
  </data>
  <data name="chkPosterFolder.ToolTip" xml:space="preserve">
    <value>Save all posters to the folder below, instead of saving to each Movie folder.

Having all posters in a common folder allows JRiver to display them without having
to access each Movie folder. This might be useful if you have many offline movies,
or if you don't want your NAS disks to spin-up when you're just browsing in JRiver.</value>
  </data>
  <metadata name="scriptTagMenu.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>375, 17</value>
  </metadata>
  <data name="txtThumbScript.ToolTip" xml:space="preserve">
    <value>Example: 
c:\scripts\caption.bat $image $name $role $type

Right-click on the textbox to insert valid $Tags via a menu.
You can enter a substring of any Tag using the syntax:
$tag[start]  or  $tag[start,count]

For instance:
$name[0]  -&gt; first letter of the name
$name[0,2]  -&gt; first 2 letters of the name</value>
  </data>
  <data name="txtPosterScript.ToolTip" xml:space="preserve">
    <value>Example:
c:\scripts\jewelCase.bat $image

Right-click on the textbox to insert valid $Tags via a menu.
You can enter a substring of any Tag using the syntax:
$tag[start]  or  $tag[start,count]

For instance:
$name[0]  -&gt; first letter of the name
$name[0,2]  -&gt; first 2 letters of the name</value>
  </data>
  <data name="chkIgnoreArticles.ToolTip" xml:space="preserve">
    <value>When sorting by Title, ignore articles like The/A/An.
Titles will still be written correctly to JRiver.

Example: "The Shining" will display as "Shining, The"

The full list of ignored articles can be edited on MCRatings' Settings.xml.
</value>
  </data>
  <data name="txtActorPicsPath.ToolTip" xml:space="preserve">
    <value>Path to store the Cast/Crew thumbnails.

Right-click on the textbox to insert valid $Tags via a menu.
You can enter a substring of any Tag using the syntax:
$tag[start]  or  $tag[start,count]

For instance:
$tmdb  -&gt; TMDb ID of the movie
$name[0]  -&gt; first letter of the Actor name
$name[0,2]  -&gt; first 2 letters of the Actor name</value>
  </data>
  <data name="txtPosterPath.ToolTip" xml:space="preserve">
    <value>Common Path to store movie posters.

Right-click on the textbox to insert valid $Tags via a menu.
You can enter a substring of any Tag using the syntax:
$tag[start]  or  $tag[start,count]

For instance:
$year  -&gt; adds the movie Year
$year[2,2]  -&gt; 2 last digits of the year
$title[0]  -&gt; first letter of the movie Title</value>
  </data>
  <metadata name="colorDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>114, 17</value>
  </metadata>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>235, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>53</value>
  </metadata>
</root>